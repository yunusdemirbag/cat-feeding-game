<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anne, Acƒ±ktƒ±m! üê±</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            touch-action: none;
        }

        #gameContainer {
            width: min(100vw, 400px);
            height: min(100vh, 700px);
            background: #f4e4bc;
            border: 4px solid #8b4513;
            border-radius: 10px;
            position: relative;
            overflow: hidden;
            image-rendering: pixelated;
        }

        #gameCanvas {
            width: 100%;
            height: 100%;
            cursor: grab;
        }

        #gameCanvas:active {
            cursor: grabbing;
        }

        .ui-overlay {
            position: absolute;
            top: 10px;
            left: 10px;
            color: #333;
            font-weight: bold;
            font-size: 14px;
            z-index: 100;
        }

        .speech-bubble {
            position: absolute;
            background: white;
            border: 2px solid #333;
            border-radius: 20px;
            padding: 8px 12px;
            font-size: 12px;
            font-weight: bold;
            z-index: 50;
            animation: bounce 0.5s ease-out;
            pointer-events: none;
        }

        .speech-bubble::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 8px solid transparent;
            border-right: 8px solid transparent;
            border-top: 8px solid #333;
        }

        .speech-bubble::before {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 6px solid white;
        }

        @keyframes bounce {
            0% { transform: scale(0) translateY(20px); opacity: 0; }
            50% { transform: scale(1.1) translateY(-5px); opacity: 1; }
            100% { transform: scale(1) translateY(0); opacity: 1; }
        }

        .game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 200;
        }

        .restart-btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }

        .restart-btn:hover {
            background: #45a049;
        }

        .dragging {
            transform: scale(1.1);
            opacity: 0.8;
            z-index: 75;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div class="ui-overlay">
            <div>Skor: <span id="score">0</span></div>
            <div>S√ºre: <span id="timer">20</span>s</div>
            <div>Seviye: <span id="level">1</span></div>
        </div>
        <canvas id="gameCanvas"></canvas>
    </div>

    <script>
        class Game {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.canvas.width = 400;
                this.canvas.height = 700;
                
                this.score = 0;
                this.level = 1;
                this.timeLeft = 20;
                this.gameRunning = true;
                this.currentRequest = null;
                this.requestTimer = null;
                this.countdownTimer = null;
                
                this.cats = [];
                this.items = [];
                this.draggedItem = null;
                this.speechBubbles = [];
                this.gameStarted = false;
                
                // G√∂rselleri y√ºkle
                this.images = {};
                this.imagesLoaded = 0;
                this.totalImages = 6;
                
                this.loadImages();
                this.gameLoop(); // Y√ºkleme ekranƒ± i√ßin hemen ba≈ülat
            }

            loadImages() {
                const imageUrls = {
                    room: './oda.png',
                    woman: './af.png',
                    water: './su.png',
                    food: './mama.png',
                    misa: './misa.png',
                    pars: './pars.png'
                };

                // 3 saniye sonra timeout - g√∂rseller y√ºklenmezse oyuna ba≈üla
                setTimeout(() => {
                    if (this.imagesLoaded < this.totalImages) {
                        console.log('G√∂rsel y√ºkleme timeout - fallback modda ba≈ülƒ±yor');
                        this.imagesLoaded = this.totalImages; // Zorla tamamla
                        if (!this.gameStarted) {
                            this.gameStarted = true;
                            this.init();
                            this.bindEvents();
                        }
                    }
                }, 3000);

                Object.keys(imageUrls).forEach(key => {
                    this.images[key] = new Image();
                    
                    this.images[key].onload = () => {
                        this.imagesLoaded++;
                        console.log(`‚úÖ G√∂rsel y√ºklendi: ${key} (${this.imagesLoaded}/${this.totalImages})`);
                        if (this.imagesLoaded === this.totalImages && !this.gameStarted) {
                            this.gameStarted = true;
                            this.init();
                            this.bindEvents();
                        }
                    };
                    
                    this.images[key].onerror = () => {
                        console.log(`‚ùå G√∂rsel y√ºklenemedi: ${key}`);
                        this.imagesLoaded++;
                        if (this.imagesLoaded === this.totalImages && !this.gameStarted) {
                            this.gameStarted = true;
                            this.init();
                            this.bindEvents();
                        }
                    };
                    
                    this.images[key].src = imageUrls[key];
                });
            }

            init() {
                // Kedileri olu≈ütur - daha dinamik pozisyonlar
                this.cats = [
                    {
                        id: 'misa',
                        name: 'Mi≈üa',
                        x: Math.random() * 200 + 50,
                        y: Math.random() * 300 + 350,
                        width: 80,
                        height: 80,
                        color: '#666',
                        currentNeed: null
                    },
                    {
                        id: 'pars',
                        name: 'Pars',
                        x: Math.random() * 200 + 150,
                        y: Math.random() * 300 + 350,
                        width: 80,
                        height: 80,
                        color: '#DAA520',
                        currentNeed: null
                    }
                ];

                // E≈üyalarƒ± olu≈ütur
                this.items = [
                    {
                        id: 'food',
                        type: 'food',
                        x: 50,
                        y: 600,
                        width: 60,
                        height: 60,
                        color: '#8B4513',
                        originalX: 50,
                        originalY: 600,
                        isDragging: false
                    },
                    {
                        id: 'water',
                        type: 'water',
                        x: 290,
                        y: 600,
                        width: 60,
                        height: 60,
                        color: '#4169E1',
                        originalX: 290,
                        originalY: 600,
                        isDragging: false
                    }
                ];

                this.startNewRequest();
            }

            bindEvents() {
                // Mouse events
                this.canvas.addEventListener('mousedown', (e) => this.handleStart(e));
                this.canvas.addEventListener('mousemove', (e) => this.handleMove(e));
                this.canvas.addEventListener('mouseup', (e) => this.handleEnd(e));

                // Touch events
                this.canvas.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    this.handleStart(e.touches[0]);
                });
                this.canvas.addEventListener('touchmove', (e) => {
                    e.preventDefault();
                    this.handleMove(e.touches[0]);
                });
                this.canvas.addEventListener('touchend', (e) => {
                    e.preventDefault();
                    this.handleEnd(e.changedTouches[0]);
                });
            }

            getEventPos(e) {
                const rect = this.canvas.getBoundingClientRect();
                const scaleX = this.canvas.width / rect.width;
                const scaleY = this.canvas.height / rect.height;
                
                return {
                    x: (e.clientX - rect.left) * scaleX,
                    y: (e.clientY - rect.top) * scaleY
                };
            }

            handleStart(e) {
                if (!this.gameRunning) return;
                
                const pos = this.getEventPos(e);
                
                for (let item of this.items) {
                    if (this.isPointInRect(pos, item)) {
                        this.draggedItem = item;
                        item.isDragging = true;
                        break;
                    }
                }
            }

            handleMove(e) {
                if (this.draggedItem) {
                    const pos = this.getEventPos(e);
                    this.draggedItem.x = pos.x - this.draggedItem.width / 2;
                    this.draggedItem.y = pos.y - this.draggedItem.height / 2;
                }
            }

            handleEnd(e) {
                if (!this.draggedItem || !this.gameRunning) return;
                
                const pos = this.getEventPos(e);
                let delivered = false;

                // Kedilere bƒ±rakƒ±ldƒ± mƒ± kontrol et
                for (let cat of this.cats) {
                    if (this.isPointInRect(pos, cat) && cat.currentNeed) {
                        if (this.draggedItem.type === cat.currentNeed) {
                            this.correctDelivery(cat);
                            delivered = true;
                        } else {
                            this.wrongDelivery(cat);
                            delivered = true;
                        }
                        break;
                    }
                }

                // E≈üyayƒ± yerine koy
                this.draggedItem.x = this.draggedItem.originalX;
                this.draggedItem.y = this.draggedItem.originalY;
                this.draggedItem.isDragging = false;
                this.draggedItem = null;
            }

            isPointInRect(point, rect) {
                return point.x >= rect.x && 
                       point.x <= rect.x + rect.width && 
                       point.y >= rect.y && 
                       point.y <= rect.y + rect.height;
            }

            correctDelivery(cat) {
                this.score++;
                this.showSpeechBubble(cat, cat.currentNeed === 'food' ? "Hmm... √áok g√ºzeldi!" : "≈ûap ≈üap... oh be anne!", '#90EE90');
                this.clearCurrentRequest();
                this.updateUI();
                
                setTimeout(() => {
                    this.startNewRequest();
                }, 1000);
            }

            wrongDelivery(cat) {
                const message = cat.currentNeed === 'food' ? "Ben acƒ±ktƒ±m, bu su!" : "Hayƒ±r! Yemek deƒüil bu!";
                this.showSpeechBubble(cat, message, '#FFB6C1');
                this.gameOver();
            }

            startNewRequest() {
                if (!this.gameRunning) return;
                
                // Rastgele kedi ve ihtiya√ß se√ß
                const randomCat = this.cats[Math.floor(Math.random() * this.cats.length)];
                const needType = Math.random() > 0.5 ? 'food' : 'water';
                const message = needType === 'food' ? "Anneee a√ßlƒ±ktan bayƒ±lcam!" : "Miyav! Su istiyorum anne...";
                
                randomCat.currentNeed = needType;
                this.currentRequest = { cat: randomCat, type: needType };
                
                this.showSpeechBubble(randomCat, message, '#FFE4B5');
                
                // S√ºre ba≈ülat
                this.timeLeft = Math.max(5, 20 - this.level * 2);
                this.updateUI();
                
                this.countdownTimer = setInterval(() => {
                    this.timeLeft--;
                    this.updateUI();
                    
                    if (this.timeLeft <= 0) {
                        this.timeOut();
                    }
                }, 1000);
            }

            clearCurrentRequest() {
                if (this.currentRequest) {
                    this.currentRequest.cat.currentNeed = null;
                    this.currentRequest = null;
                }
                
                if (this.countdownTimer) {
                    clearInterval(this.countdownTimer);
                    this.countdownTimer = null;
                }
                
                this.removeSpeechBubbles();
            }

            timeOut() {
                this.showSpeechBubble(this.currentRequest.cat, "√áok ge√ß kaldƒ±n anne...", '#FFB6C1');
                this.gameOver();
            }

            gameOver() {
                this.gameRunning = false;
                this.clearCurrentRequest();
                
                setTimeout(() => {
                    const gameOverDiv = document.createElement('div');
                    gameOverDiv.className = 'game-over';
                    gameOverDiv.innerHTML = `
                        <h2>üéÆ GAME OVER</h2>
                        <p>üòø Kediler √ºzg√ºn...</p>
                        <p><strong>Skorun:</strong> ${this.score} doƒüru besleme</p>
                        <p><strong>Seviye:</strong> ${this.level}</p>
                        <button class="restart-btn" onclick="location.reload()">üîÅ Tekrar Oyna</button>
                    `;
                    document.getElementById('gameContainer').appendChild(gameOverDiv);
                }, 1000);
            }

            showSpeechBubble(cat, text, color) {
                this.removeSpeechBubbles();
                
                const bubble = document.createElement('div');
                bubble.className = 'speech-bubble';
                bubble.textContent = text;
                bubble.style.backgroundColor = color;
                bubble.style.left = (cat.x + cat.width/2) + 'px';
                bubble.style.top = (cat.y - 50) + 'px';
                bubble.style.transform = 'translateX(-50%)';
                
                document.getElementById('gameContainer').appendChild(bubble);
                this.speechBubbles.push(bubble);
            }

            removeSpeechBubbles() {
                this.speechBubbles.forEach(bubble => {
                    if (bubble.parentNode) {
                        bubble.parentNode.removeChild(bubble);
                    }
                });
                this.speechBubbles = [];
            }

            updateUI() {
                document.getElementById('score').textContent = this.score;
                document.getElementById('timer').textContent = this.timeLeft;
                document.getElementById('level').textContent = this.level;
                
                // Seviye artƒ±≈üƒ±
                if (this.score > 0 && this.score % 5 === 0 && this.score / 5 > this.level - 1) {
                    this.level++;
                }
            }

            drawRoom() {
                // Oda arkaplanƒ±nƒ± √ßiz
                if (this.images.room && this.images.room.complete && this.images.room.naturalWidth > 0) {
                    this.ctx.drawImage(this.images.room, 0, 0, this.canvas.width, this.canvas.height);
                } else {
                    // Fallback - piksel art oda √ßizimi
                    this.ctx.fillStyle = '#DEB887';
                    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                    
                    this.ctx.fillStyle = '#F5DEB3';
                    this.ctx.fillRect(0, 0, this.canvas.width, 400);
                    
                    this.ctx.fillStyle = '#8B4513';
                    this.ctx.fillRect(80, 200, 120, 80);
                    
                    this.ctx.fillStyle = '#A0522D';
                    this.ctx.fillRect(100, 250, 80, 100);
                    
                    this.ctx.fillStyle = '#9370DB';
                    this.ctx.fillRect(220, 180, 150, 120);
                    
                    this.ctx.fillStyle = '#654321';
                    this.ctx.fillRect(20, 50, 100, 150);
                }
            }

            drawCat(cat) {
                const imageKey = cat.id; // 'misa' veya 'pars'
                
                if (this.images[imageKey] && this.images[imageKey].complete && this.images[imageKey].naturalWidth > 0) {
                    // Ger√ßek kedi g√∂rselini √ßiz
                    this.ctx.drawImage(this.images[imageKey], cat.x, cat.y, cat.width, cat.height);
                } else {
                    // Fallback - piksel art kedi √ßizimi
                    this.ctx.fillStyle = cat.color;
                    this.ctx.fillRect(cat.x, cat.y, cat.width, cat.height);
                    
                    this.ctx.beginPath();
                    this.ctx.arc(cat.x + cat.width/2, cat.y + 20, 25, 0, Math.PI * 2);
                    this.ctx.fill();
                    
                    this.ctx.fillStyle = cat.color;
                    this.ctx.beginPath();
                    this.ctx.moveTo(cat.x + cat.width/2 - 20, cat.y + 5);
                    this.ctx.lineTo(cat.x + cat.width/2 - 10, cat.y - 5);
                    this.ctx.lineTo(cat.x + cat.width/2 - 5, cat.y + 10);
                    this.ctx.fill();
                    
                    this.ctx.beginPath();
                    this.ctx.moveTo(cat.x + cat.width/2 + 20, cat.y + 5);
                    this.ctx.lineTo(cat.x + cat.width/2 + 10, cat.y - 5);
                    this.ctx.lineTo(cat.x + cat.width/2 + 5, cat.y + 10);
                    this.ctx.fill();
                    
                    this.ctx.fillStyle = '#FFD700';
                    this.ctx.beginPath();
                    this.ctx.arc(cat.x + cat.width/2 - 8, cat.y + 15, 4, 0, Math.PI * 2);
                    this.ctx.fill();
                    
                    this.ctx.beginPath();
                    this.ctx.arc(cat.x + cat.width/2 + 8, cat.y + 15, 4, 0, Math.PI * 2);
                    this.ctx.fill();
                    
                    this.ctx.fillStyle = '#FF69B4';
                    this.ctx.fillRect(cat.x + cat.width/2 - 2, cat.y + 22, 4, 3);
                }
                
                // ƒ∞sim etiketi
                this.ctx.fillStyle = '#000';
                this.ctx.font = 'bold 12px Courier New';
                this.ctx.textAlign = 'center';
                this.ctx.strokeStyle = '#FFF';
                this.ctx.lineWidth = 3;
                this.ctx.strokeText(cat.name, cat.x + cat.width/2, cat.y - 5);
                this.ctx.fillText(cat.name, cat.x + cat.width/2, cat.y - 5);
            }

            drawItem(item) {
                const scale = item.isDragging ? 1.1 : 1;
                const width = item.width * scale;
                const height = item.height * scale;
                const x = item.x - (width - item.width) / 2;
                const y = item.y - (height - item.height) / 2;
                
                const imageKey = item.type; // 'food' veya 'water'
                
                if (this.images[imageKey] && this.images[imageKey].complete && this.images[imageKey].naturalWidth > 0) {
                    // Ger√ßek kabƒ± √ßiz
                    this.ctx.drawImage(this.images[imageKey], x, y, width, height);
                } else {
                    // Fallback - piksel art kap √ßizimi
                    if (item.type === 'food') {
                        this.ctx.fillStyle = '#4169E1';
                        this.ctx.fillRect(x, y, width, height);
                        
                        this.ctx.fillStyle = '#8B4513';
                        this.ctx.fillRect(x + 10, y + 10, width - 20, height - 20);
                    } else {
                        this.ctx.fillStyle = '#DC143C';
                        this.ctx.fillRect(x, y, width, height);
                        
                        this.ctx.fillStyle = '#87CEEB';
                        this.ctx.fillRect(x + 10, y + 10, width - 20, height - 20);
                    }
                }
                
                // Etiket
                this.ctx.fillStyle = '#000';
                this.ctx.font = 'bold 10px Courier New';
                this.ctx.textAlign = 'center';
                this.ctx.strokeStyle = '#FFF';
                this.ctx.lineWidth = 2;
                const label = item.type === 'food' ? 'MAMA' : 'SU';
                this.ctx.strokeText(label, x + width/2, y + height + 15);
                this.ctx.fillText(label, x + width/2, y + height + 15);
            }

            gameLoop() {
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                
                if (this.imagesLoaded < this.totalImages) {
                    // Y√ºkleme ekranƒ±
                    this.ctx.fillStyle = '#667eea';
                    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
                    
                    this.ctx.fillStyle = '#FFF';
                    this.ctx.font = 'bold 20px Courier New';
                    this.ctx.textAlign = 'center';
                    this.ctx.fillText('üê± Anne, Acƒ±ktƒ±m! üê±', this.canvas.width/2, this.canvas.height/2 - 50);
                    
                    this.ctx.font = '14px Courier New';
                    this.ctx.fillText(`Y√ºkleniyor... ${this.imagesLoaded}/${this.totalImages}`, this.canvas.width/2, this.canvas.height/2);
                    
                    // Y√ºkleme √ßubuƒüu
                    const barWidth = 200;
                    const barHeight = 20;
                    const barX = (this.canvas.width - barWidth) / 2;
                    const barY = this.canvas.height/2 + 30;
                    
                    this.ctx.strokeStyle = '#FFF';
                    this.ctx.lineWidth = 2;
                    this.ctx.strokeRect(barX, barY, barWidth, barHeight);
                    
                    this.ctx.fillStyle = '#4CAF50';
                    const progress = (this.imagesLoaded / this.totalImages) * barWidth;
                    this.ctx.fillRect(barX, barY, progress, barHeight);
                    
                    requestAnimationFrame(() => this.gameLoop());
                    return;
                }
                
                if (!this.gameRunning) return;
                
                this.drawRoom();
                
                this.cats.forEach(cat => this.drawCat(cat));
                this.items.forEach(item => this.drawItem(item));
                
                requestAnimationFrame(() => this.gameLoop());
            }
        }

        // Oyunu ba≈ülat
        window.addEventListener('load', () => {
            new Game();
        });
    </script>
</body>
</html>